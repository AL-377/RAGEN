right side: DataProto(batch=TensorDict(
    fields={
        attention_mask: Tensor(shape=torch.Size([256, 497]), device=cpu, dtype=torch.int64, is_shared=False),
        input_ids: Tensor(shape=torch.Size([256, 497]), device=cpu, dtype=torch.int64, is_shared=False),
        old_log_probs: Tensor(shape=torch.Size([256, 100]), device=cpu, dtype=torch.float32, is_shared=False),
        position_ids: Tensor(shape=torch.Size([256, 497]), device=cpu, dtype=torch.int64, is_shared=False),
        prompts: Tensor(shape=torch.Size([256, 397]), device=cpu, dtype=torch.int64, is_shared=False),
        responses: Tensor(shape=torch.Size([256, 100]), device=cpu, dtype=torch.int64, is_shared=False)},
    batch_size=torch.Size([256]),
    device=cpu,
    is_shared=False), non_tensor_batch={}, meta_info={'micro_batch_size': 8, 'max_token_len': 16384, 'use_dynamic_bsz': False, 'temperature': 1.0})
right side shape: torch.Size([256, 100])
right side decoded:  floor
2. Goal Move - Push all boxes onto the top floor
3. Side moves - Aim for peaceful placement on left/right sides
4. Continue Pushing Move - Move higher for additional boxes

Step 2: Think through the best next actions.

**Thoughts:**

1. **Initial Moves**: Ideally, we need to move to the place where all boxes are placed before any attempts to push them. Our best move is to face the boxes directly towards them. This would minimize
