left side: DataProto(batch=TensorDict(
    fields={
        attention_mask: Tensor(shape=torch.Size([256, 397]), device=cpu, dtype=torch.int64, is_shared=False),
        input_ids: Tensor(shape=torch.Size([256, 397]), device=cpu, dtype=torch.int64, is_shared=False),
        position_ids: Tensor(shape=torch.Size([256, 397]), device=cpu, dtype=torch.int64, is_shared=False)},
    batch_size=torch.Size([256]),
    device=None,
    is_shared=False), non_tensor_batch={}, meta_info={})
left side shape: torch.Size([256, 397])
left side decoded: You are a Sokoban solver.

Sokoban Quick Guide
Goal: Push all boxes (X) onto targets (O).

Symbols:
# Wall | _ Floor | O Target | X Box | P You
âˆš = Box on Target | S = You on Target

Rules:
1. Push boxes (canâ€™t pull).
2. Avoid walls (#).
3. Donâ€™t trap boxes in corners.

Controls:
1 (Up) | 2 (Down) | 3 (Left) | 4 (Right)

Rewards:
Move: -0.1
Box on target: +1.0
All boxes placed: +10.0

**Answer format**:
**Respond in 2 steps**:
1. **Think**: Analyze map, risks, and best move.
2. **Reply ONLY**:
   Thoughts: [1-line strategy]
   Action: [1/2/3/4]

Tip: Plan moves ahead to avoid stuck boxes.
Win when all X become âˆš! ðŸŽ¯ 

[Cumulative Observations]:
 # 	 # 	 # 	 # 	 # 	 # 	
 # 	 # 	 # 	 # 	 # 	 # 	
 # 	 # 	 # 	 P 	 _ 	 # 	
 # 	 O 	 X 	 X 	 _ 	 # 	
 # 	 _ 	 _ 	 O 	 _ 	 # 	
 # 	 # 	 # 	 # 	 # 	 # 	
Decide the next action: 

Thoughts: First, push the *wall* to the *LEFT* to avoid breaking the target when minimizing movement.
Action: 3

Tip: Battle walls by pushing boxes containing walls and breaking barriers.
Reinforce your solution!

Now you are ready to enter to the game.
Good luck! ðŸŒŸ
Thoughts: Now I push all Xs to Break your path if possible.initialize Sokoban with the initial puzzles and get mapped.So I will print this J.K.'
