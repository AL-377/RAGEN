right side: DataProto(batch=TensorDict(
    fields={
        attention_mask: Tensor(shape=torch.Size([256, 597]), device=cpu, dtype=torch.int64, is_shared=False),
        input_ids: Tensor(shape=torch.Size([256, 597]), device=cpu, dtype=torch.int64, is_shared=False),
        old_log_probs: Tensor(shape=torch.Size([256, 100]), device=cpu, dtype=torch.float32, is_shared=False),
        position_ids: Tensor(shape=torch.Size([256, 597]), device=cpu, dtype=torch.int64, is_shared=False),
        prompts: Tensor(shape=torch.Size([256, 497]), device=cpu, dtype=torch.int64, is_shared=False),
        responses: Tensor(shape=torch.Size([256, 100]), device=cpu, dtype=torch.int64, is_shared=False)},
    batch_size=torch.Size([256]),
    device=cpu,
    is_shared=False), non_tensor_batch={}, meta_info={'micro_batch_size': 8, 'max_token_len': 16384, 'use_dynamic_bsz': False, 'temperature': 1.0})
right side shape: torch.Size([256, 100])
right side decoded:  rejections or negative consequences.

2. **Handling P:**
   Pop any remaining (not in the top floor) boxes to avoid rejections or negative consequences.

3. **Moving:**
   - Aim for a placement in a critical cell such as the top floor (O Goal Target).

4. **Moving Method:**
   Reduce action complexity by planning your move sets:
   - Move left or right based on how closely to the P or sides you are:
   - Building ladder similar to
